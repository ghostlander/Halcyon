# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_UPNP:=0
USE_IPV6:=1

CC = gcc
CFLAGS = -O2 -fomit-frame-pointer

LINK:=$(CXX)

DEFS=-DBOOST_SPIRIT_THREADSAFE

DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))

LMODE = dynamic
LMODE2 = dynamic
ifdef STATIC
	LMODE = static
	ifeq (${STATIC}, all)
		LMODE2 = static
	endif
endif

# for boost 1.37, add -mt to the boost libraries
LIBS += \
   -Wl,-B$(LMODE) \
   -L/usr/local/lib \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l boost_chrono$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl \
   -l crypto \
   -l execinfo

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBS += -l miniupnpc
	DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

LIBS+= \
 -Wl,-B$(LMODE2) \
   -l z \
   -l dl \
   -l pthread

# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS = $(CFLAGS) -fno-stack-protector -pthread -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEFS) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=-Wl,-s $(LDFLAGS)

OBJS= \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/miner.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/neoscrypt.o \
    obj/neoscrypt_asm.o \
    obj/x15hash.o \
    obj/blake.o \
    obj/bmw.o \
    obj/cubehash.o \
    obj/echo.o \
    obj/fugue.o \
    obj/groestl.o \
    obj/hamsi.o \
    obj/jh.o \
    obj/keccak.o \
    obj/luffa.o \
    obj/shabal.o \
    obj/shavite.o \
    obj/simd.o \
    obj/skein.o \
    obj/whirlpool.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-arm.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/ntp.o

all: halcyond

LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; make libleveldb.a libmemenv.a; cd ..;
obj/txdb-leveldb.o: leveldb/libleveldb.a

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/neoscrypt.o: neoscrypt.c
	$(CC) $(CFLAGS) -DASM -DOPT -c -o $@ $^

obj/neoscrypt_asm.o: neoscrypt_asm.S
	$(CC) -c -DASM -DOPT -o $@ $^

obj/x15hash.o: x15hash.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/blake.o: sph/blake.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/bmw.o: sph/bmw.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/cubehash.o: sph/cubehash.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/echo.o: sph/echo.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/fugue.o: sph/fugue.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/groestl.o: sph/groestl.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/hamsi.o: sph/hamsi.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/jh.o: sph/jh.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/keccak.o: sph/keccak.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/luffa.o: sph/luffa.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/shabal.o: sph/shabal.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/shavite.o: sph/shavite.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/simd.o: sph/simd.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/skein.o: sph/skein.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/whirlpool.o: sph/whirlpool.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/scrypt-x86.o: scrypt-x86.S
	$(CC) -c -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CC) -c -MMD -o $@ $<

obj/scrypt-arm.o: scrypt-arm.S
	$(CC) -c -MMD -o $@ $<

obj/%.o: %.c
	$(CC) -c $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
              -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

halcyond: $(OBJS:obj/%=obj/%)
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

clean:
	-rm -f halcyond
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/build.h

FORCE:
