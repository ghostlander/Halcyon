# -*- mode: Makefile; -*-
# Copyright (c) 2011 Bitcoin Developers
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Mac OS X makefile for halcyon
# Originally by Laszlo Hanyecz (solar@heliacal.net)

CC = gcc
CFLAGS = -O2 -fomit-frame-pointer

CXX = g++
DEPSDIR = /usr/local

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj \
 -I"$(DEPSDIR)/include"

LIBPATHS= \
 -L"$(DEPSDIR)/lib"

USE_UPNP:=1
USE_IPV6:=1

LIBS= -dead_strip

ifdef STATIC
# Build STATIC if you are redistributing the halcyond binary
LIBS += \
 $(DEPSDIR)/lib/libdb_cxx.a \
 $(DEPSDIR)/lib/libboost_system-mt.a \
 $(DEPSDIR)/lib/libboost_filesystem-mt.a \
 $(DEPSDIR)/lib/libboost_program_options-mt.a \
 $(DEPSDIR)/lib/libboost_thread-mt.a \
 $(DEPSDIR)/lib/libboost_chrono-mt.a \
 $(DEPSDIR)/lib/libssl.a \
 $(DEPSDIR)/lib/libcrypto.a \
 -lz
else
LIBS += \
 -ldb_cxx \
 -lboost_system-mt \
 -lboost_filesystem-mt \
 -lboost_program_options-mt \
 -lboost_thread-mt \
 -lboost_chrono-mt \
 -lssl \
 -lcrypto \
 -lz
endif

DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE

ifdef RELEASE
# Compile for maximum compatibility and smallest size.
# This requires that dependencies are compiled
# the same way.
CXXFLAGS = $(CFLAGS) -mmacosx-version-min=10.5 -arch i386
else
CXXFLAGS = $(CFLAGS)
endif

# ppc doesn't work because we don't support big-endian
CXXFLAGS += -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)

OBJS= \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/miner.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/neoscrypt.o \
    obj/neoscrypt_asm.o \
    obj/x15hash.o \
    obj/blake.o \
    obj/bmw.o \
    obj/cubehash.o \
    obj/echo.o \
    obj/fugue.o \
    obj/groestl.o \
    obj/hamsi.o \
    obj/jh.o \
    obj/keccak.o \
    obj/luffa.o \
    obj/shabal.o \
    obj/shavite.o \
    obj/simd.o \
    obj/skein.o \
    obj/whirlpool.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-arm.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/ntp.o

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	DEFS += -DUSE_UPNP=$(USE_UPNP)
ifdef STATIC
	LIBS += $(DEPSDIR)/lib/libminiupnpc.a
else
	LIBS += -lminiupnpc
endif
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

all: halcyond

LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; make; cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/neoscrypt.o: neoscrypt.c
	$(CC) $(CFLAGS) -DASM -DOPT -c -o $@ $^

obj/neoscrypt_asm.o: neoscrypt_asm.S
	$(CC) -c -DASM -DOPT -o $@ $^

obj/x15hash.o: x15hash.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/blake.o: sph/blake.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/bmw.o: sph/bmw.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/cubehash.o: sph/cubehash.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/echo.o: sph/echo.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/fugue.o: sph/fugue.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/groestl.o: sph/groestl.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/hamsi.o: sph/hamsi.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/jh.o: sph/jh.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/keccak.o: sph/keccak.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/luffa.o: sph/luffa.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/shabal.o: sph/shabal.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/shavite.o: sph/shavite.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/simd.o: sph/simd.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/skein.o: sph/skein.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/whirlpool.o: sph/whirlpool.c
	$(CC) $(CFLAGS) -c -o $@ $^

obj/scrypt-x86.o: scrypt-x86.S
	$(CC) -c -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CC) -c -MMD -o $@ $<

obj/%.o: %.c
	$(CC) -c $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
              -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

halcyond: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	-rm -f halcyond
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/build.h

FORCE:
